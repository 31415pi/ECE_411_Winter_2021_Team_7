
#define PRODUCTION
#define WILD_ALARM

#include <Arduino.h>

#define ARRAY_SIZE(arr) (sizeof(arr)/sizeof(*arr))

typedef unsigned long ulong;
typedef unsigned short u08;

// Pinout
#define pin_gestur_int ((int)  2) // D2
#define pin_rtc_int    ((int)  3) // D3
#define pin_buzzer_pwm ((int)  5) // D5
#define pin_neo_pixels ((int)  8) // D8
#define pin_led_prog   ((int) 10) // D10
#define pin_led_power  ((int) 11) // D11
#define pin_button_ent ((int) 16) // A4
#define pin_button_sel ((int) 17) // A3

// Defines
#define cnt_neo_pixels ((int) 10) // Number of NeoPixels
#define HHMM_MAX (24*60)
#define ADJUST_TIMEOUT_MS (1000 * 10)
#define ADJUST_TIMEOUT    (       10)
#define GESTURE_POLLING_INTERVAL_MS ((ulong) 50)

// Production/Debug Defines
#ifdef PRODUCTION
#define HHMM_SEC_PER_MIN        60
#define INITIAL_TIME          1050 // 5:30pm 
#define INITIAL_ALARM         1070 // 5:50pm
#define INITIAL_GLOW_DURATION   15
#define INITIAL_ALARM_SECONDS   60
#else
#define HHMM_SEC_PER_MIN         5 // Faster time for demo.
#define INITIAL_TIME             0
#define INITIAL_ALARM           20
#define INITIAL_GLOW_DURATION   15
#define INITIAL_ALARM_SECONDS   60
#define WILD_ALARM
//#define BUTTONS_TEST_SOUND_LIGHT
#endif

// Settings & States
extern int clock_ss;
extern int clock_hhmm;
extern int alarm_hhmm;
extern int alarm_set;
extern char mode;
extern char submode;


extern int enabled; // Check for some Enabled states.
enum {
  ENABLED_LIGHT            = 0x00001,
  ENABLED_LIGHT_TRANSITION = 0x00002,
  ENABLED_SOUND            = 0x00004,
};
#define ENABLED_SET(_group) (enabled |=   ENABLED_##_group)
#define ENABLED_CLR(_group) (enabled &= ~(ENABLED_##_group))
#define ENABLED(_group)     (enabled &    ENABLED_##_group)

// Logging
template <typename T> void log(T val) {
  Serial.println(val);
}
template <typename T, typename... Types> void log(T val, Types... args) {
  Serial.print(val);
  log(args...);
}


// Common Support and Button Helpers
enum { button_none, button_pressed, button_released, button_repeat };
int detect_button(bool *state, int pin);
int detect_button_repeat(bool *state, int pin, ulong delay, ulong *last);
int elapsed(ulong *ticks, long delay);
int elapsed_reset(ulong *ticks, long delay);

// Button
void button_service();

// Light Control
void light_off();
void light_on(u08 brightness, u08 r, u08 g, u08 b);
void light_random();
void light_setup();
void light_transition(ulong seconds, u08 r, u08 g, u08 b);
void light_service();


// Sound / Music
void sound_off();
void sound_chirp();
void sound_bom();
void sound_on();
void sound_service();

int hz_pentatonic();
int hz_happy();
int hz_sad();
int rythem(int base);


// Control State & State Machine

// Enumerates all possible control events generated by user input or system events.
enum control_event {
  event_tick,    // Second has elapsed. Used for updating flashing of the clock and time.
  event_tick_min,// Tick for each minute change.
  event_timeout, // Timeout of different control modes.
  event_select,  // Select/Menu.
  event_prev,    // Could be optional. Probably nicer to have this.
  event_next,    // Change selected value.
  event_toggle,  // Toggle alarm.
  event_light_on,
  event_light_off,
};

// Enumarate all possible mode states.
enum control_mode {
  mode_clock, // Only clock is displaying.
  mode_menu,  // Menu for selecting what to adjust. Uses menu submodes.
  mode_adjust_clock, // Adjust clock. Uses adjust submodes.
  mode_adjust_alarm, // Adjust alarm. Uses adjust submodes.
  mode_alarm, // Alarm is ringing.
};
enum control_submode_adjust {
  submode_none,
  submode_adjust_HH,
  submode_adjust_Mm,
  submode_adjust_mM,
  submode_adjust_am,
  submode_adjust_end, // LAST
};
enum control_submode_menu {
  submode_menu_none,
  submode_menu_alarm_toggle,
  submode_menu_clock,
  submode_menu_alarm,
  submode_menu_end, // LAST
};

// Enumerates all possible display hide states.
enum display_hide {
  hide_none,
  hide_h_,
  hide__h,
  hide_colon,
  hide_m_,
  hide__m,
  hide_am,
  hide_alarm,
};

void display_setup();
void display_service();
int display_msg_next_show(const char *msg);
void display_update(const char *msg);
void display_update(int hhmm);
void display_show();

void control_setup();
void control_service();
void control_timeout(ulong ms);
void control_event(enum control_event event);

void gesture_setup();
void gesture_service();
void gesture_handler();
